{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome A trashy blog written by a biased, incompetent and lazy human \ud83e\udd23. This blog was completed revamped and rebuilt from scratch on 2024-07-07. The original blog with 200+ posts were either distilled, expanded or simply removed because of the even higher standard for the quality of the posts. (\u6b64\u535a\u5ba2\u542f\u7528\u4e8e 2024 \u5e74 7 \u6708 7 \u65e5\uff0c\u539f\u535a\u5ba2 200 \u4f59\u7bc7\u6587\u7ae0\u5df2\u7ecf\u88ab\u7cbe\u7b80\u3001\u6269\u5c55\u6216\u79fb\u9664\u3002\u65b0\u535a\u5ba2\u5bf9\u4e8e\u535a\u6587\u7684\u8981\u6c42\u66f4\u4e3a\u4e25\u683c\u3002) Available Posts Hands-on Frontend Network Operating System Database C# and .NET Ext.js Facts and Quotes About AI About Equality About Climate Change About Politics About Health About Mind About Finance About Universe About Love About Organism Project layout Built via mkdocs gh-deploy --site-dir build-output mkdocs.yml # Blog configuration. hands-on/ # Bits of code examples. docs/ index.md # Homepage. assets/ # Images and other assets. hands-on/ # Concepts in practice. facts-n-quotes/ # Random facts and quotes.","title":"Home"},{"location":"#welcome","text":"A trashy blog written by a biased, incompetent and lazy human \ud83e\udd23. This blog was completed revamped and rebuilt from scratch on 2024-07-07. The original blog with 200+ posts were either distilled, expanded or simply removed because of the even higher standard for the quality of the posts. (\u6b64\u535a\u5ba2\u542f\u7528\u4e8e 2024 \u5e74 7 \u6708 7 \u65e5\uff0c\u539f\u535a\u5ba2 200 \u4f59\u7bc7\u6587\u7ae0\u5df2\u7ecf\u88ab\u7cbe\u7b80\u3001\u6269\u5c55\u6216\u79fb\u9664\u3002\u65b0\u535a\u5ba2\u5bf9\u4e8e\u535a\u6587\u7684\u8981\u6c42\u66f4\u4e3a\u4e25\u683c\u3002)","title":"Welcome"},{"location":"#available-posts","text":"","title":"Available Posts"},{"location":"#hands-on","text":"Frontend Network Operating System Database C# and .NET Ext.js","title":"Hands-on"},{"location":"#facts-and-quotes","text":"About AI About Equality About Climate Change About Politics About Health About Mind About Finance About Universe About Love About Organism","title":"Facts and Quotes"},{"location":"#project-layout","text":"Built via mkdocs gh-deploy --site-dir build-output mkdocs.yml # Blog configuration. hands-on/ # Bits of code examples. docs/ index.md # Homepage. assets/ # Images and other assets. hands-on/ # Concepts in practice. facts-n-quotes/ # Random facts and quotes.","title":"Project layout"},{"location":"facts-n-quotes/facts-n-quotes-about-AI/","text":"Context None yet Inforgraphics What's LLM in the landscape of AI field?","title":"facts n quotes about AI"},{"location":"facts-n-quotes/facts-n-quotes-about-AI/#context","text":"None yet","title":"Context"},{"location":"facts-n-quotes/facts-n-quotes-about-AI/#inforgraphics","text":"What's LLM in the landscape of AI field?","title":"Inforgraphics"},{"location":"facts-n-quotes/facts-n-quotes-about-climate-change/","text":"Context None yet","title":"Facts n quotes about climate change"},{"location":"facts-n-quotes/facts-n-quotes-about-climate-change/#context","text":"None yet","title":"Context"},{"location":"facts-n-quotes/facts-n-quotes-about-equality/","text":"Context None yet One-liner Labels are the opposite of understanding \u4eba\u662f\u571f\u5730\u7684\u9644\u5eb8\uff0c\u8fd8\u662f\u4eba\u662f\u751f\u6d3b\u5728\u571f\u5730\u4e0a\u7684\u4e3b\u4f53\uff0c\u8fd9\u4e24\u4e2a\u7acb\u573a\u89c2\u70b9\u60f3\u4e0d\u6e05\u695a\uff0c\u4e5f\u4e0d\u7528\u6765\u8ba8\u8bba\u65cf\u7fa4\u95ee\u9898\u4e86\u3002 \u6b0a\u529b\u3001\u653f\u5e9c\u3001\u4e3b\u6d41\u4e0d\u9700\u8981\u4f60\u652f\u6301\uff0c\u4f60\u7684\u7a05\u91d1\u548c\u751f\u6d3b\u672c\u8eab\u5c31\u5df2\u7d93\u662f\u3002\u9700\u8981\u7406\u89e3\u540c\u60c5\u548c\u652f\u6301\u7684\u662f\u5f31\u52e2\u548c\u5c0f\u773e\uff0c\u6c38\u9060\u7ad9\u5728\u5f8c\u8005\u7684\u5c0d\u9762\uff0c\u90a3\u5c31\u662f\u6b0a\u529b\u548c\u4e3b\u6d41\u7684\u5e6b\u51f6\u3002 \u5f53\u6211\u4eec\u8bbe\u8ba1\u4e00\u4e2a\u4e3a\u6240\u6709\u4eba\u670d\u52a1\u7684\u4e16\u754c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5973\u6027\u5728\u573a\u3002\u5982\u679c\u90a3\u4e9b\u5bf9\u6211\u4eec\u6240\u6709\u4eba\u4ea7\u751f\u5f71\u54cd\u7684\u51b3\u5b9a\uff0c\u90fd\u662f\u51fa\u81ea\u8eab\u4f53\u5065\u5168\u7684\u767d\u4eba\u7537\u6027\uff08\u4e5d\u6210\u6765\u81ea\u7f8e\u56fd\uff09\uff0c\u90a3\u4e5f\u4f1a\u5f62\u6210\u6570\u636e\u7f3a\u53e3\u2014\u2014\u5c31\u50cf\u5728\u533b\u5b66\u7814\u7a76\u4e2d\u4e0d\u6536\u96c6\u5973\u6027\u8eab\u4f53\u4fe1\u606f\u4f1a\u5f62\u6210\u6570\u636e\u7f3a\u53e3\u4e00\u6837\u3002 Multi-line \u666e\u4e16\u4ef7\u503c \u6211\u4eec\u8ffd\u6c42\u666e\u4e16\u4ef7\u503c\uff0c\u662f\u56e0\u4e3a\u666e\u4e16\u4ef7\u503c\u662f\u597d\u7684\uff0c\u662f\u5bf9\u7684\uff0c\u53ea\u8981\u4f60\u662f\u4eba\u7c7b\uff0c\u4f60\u5c31\u5e94\u8be5\u62e5\u6709\u4ed6\u3002\u5982\u679c\u6709\u4eba\u4e0d\u5e78\u5931\u53bb\uff0c\u90a3\u4e48\u5c31\u5e94\u8be5\u5e2e\u52a9\u4ed6\u3002 \u4ee4\u4eba\u96be\u8fc7\u7684\u662f\uff0c\u7531\u4e8e\u4e00\u7cfb\u5217\u5ba2\u89c2\u6761\u4ef6\uff0c\u4e00\u90e8\u5206\u4eba\u65e0\u6cd5\u5bf9\u6b64\u611f\u540c\u8eab\u53d7\u3002\u666e\u4e16\u4ef7\u503c\u548c\u6c11\u65cf\u65e0\u5173\uff0c\u548c\u56fd\u7c4d\u65e0\u5173\uff0c\u5b83\u5c5e\u4e8e\u5168\u4eba\u7c7b\u3002\u4e00\u65e6\u80fd\u610f\u8bc6\u5230\u4e00\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e9b\u4eba\u5c31\u5f88\u5bb9\u6613\u80fd\u8bc6\u7834\u4e00\u4e9b\u5ef6\u7528\u4e86\u8fd1\u534a\u4e2a\u4e16\u7eaa\u7684\u53ef\u7b11\u7684\u501f\u53e3\u548c\u8c0e\u8a00\uff0c\u4ed6\u4eec\u7684\u88ab\u5bb3\u5984\u60f3\u75c7\u4e5f\u7406\u5e94\u4f1a\u88ab\u6cbb\u6108\u3002 \u5f88\u9057\u61be\uff0c\u6211\u5f97\u4e0d\u5230\u5b83\uff0c\u6211\u672c\u5e94\u8be5\u80fd\u4e3a\u6b64\u4e0d\u65ad\u5730\u5199\uff0c\u4e0d\u65ad\u5730\u5199\uff0c\u4f46\u6211\u4e0d\u80fd\u3002\u8fd9\u8ba9\u6211\u96be\u8fc7\u4e86\u5f88\u591a\u5e74\uff0c\u4e00\u76f4\u5230\u73b0\u5728\u3002\u613f\u4e0d\u5728\u610f\u7684\u4eba\u80fd\u4e00\u76f4\u4e0d\u5728\u610f\uff0c\u4ee5\u514d\u906d\u53d7\u8fd9\u79cd\u96be\u8fc7\u3002 \u4eba\u662f\u4e00\u4e2a\u591a\u4e48\u559c\u6b22\u800c\u4e14\u4e60\u60ef\u4e8e\u5206\u7c7b\u7684\u52a8\u7269 \u5bf9\u4e8e\u81ea\u5df1\u6240\u5728\u7684\u540c\u7c7b\u91cc\u53d7\u5230\u7684\u82e6\u96be\uff0c\u8981\u653e\u5927\u5230\u7fa4\u4f53\uff0c\u65f6\u95f4\u4e0a\u8ffd\u6eaf\u4e94\u5343\u5e74\uff0c\u7136\u540e\u89c9\u5f97\u81ea\u5df1\u4e5f\u5728\u53d7\u82e6 \u5bf9\u5176\u4ed6\u4eba\u53d7\u5230\u7684\u82e6\u96be\uff0c\u8981\u5177\u5316\u5230\u4e2a\u4eba\uff0c\u65f6\u95f4\u4e0a\u9650\u5236\u5728\u5177\u4f53\u7684\u4e8b\u4ef6\uff0c\u7136\u540e\u89c9\u5f97\u5bf9\u65b9\u65e0\u6cd5\u4ee3\u8868\u6574\u4f53 \u57fa\u4e8e\u8fd9\u79cd\u601d\u7ef4\u903b\u8f91\uff0c\u6784\u5efa\u81ea\u5df1\u7684\u884c\u4e3a\u6a21\u5f0f\uff0c\u4e3b\u52a8\u83b7\u53d6\u7b26\u5408\u81ea\u5df1\u89c2\u70b9\u7684\u4fe1\u606f\u2026\u2026\u5509\u3002 \u4eba\u4e4b\u672c \u5728\u8c08\u5230\u7ef4\u543e\u5c14\u4eba\u65f6\uff0c\u6709\u4e9b\u4eba\u9996\u5148\u662f\u6c49\u4eba\uff0c\u7136\u540e\u624d\u662f\u4eba \u5728\u8c08\u5230\u6027\u522b\u8bae\u9898\u65f6\uff0c\u6709\u4e9b\u4eba\u9996\u5148\u662f\u7537\u4eba\uff0c\u7136\u540e\u624d\u662f\u4eba \u5728\u8c08\u5230\u9999\u6e2f\u65f6\uff0c\u6709\u4e9b\u4eba\u9996\u5148\u662f\u4e2d\u56fd\u4eba\uff0c\u7136\u540e\u624d\u662f\u4eba \u6709\u4e9b\u4eba\u9996\u5148\u662f\u4e2d\u56fd\u7537\u6c49\u4eba\uff0c\u7136\u540e\u624d\u662f\u4eba \u6709\u4e9b\u4eba\u9a6c\u4e0a\u610f\u8bc6\u5230\u81ea\u5df1\u5c31\u662f\u6709\u4e9b\u4eba\uff0c\u7136\u540e\u8df3\u8d77\u6765\u5f00\u59cb\u9a82 On Image Generation and Political Correctness I'm really shocked at the number of people on here who turn into crybabies the moment an unwanted Asian shows up in their image generation results. Like, we live in a society that's built on generations of racial oppression that has caused immense harm to real people and you're mad because you had to look at an image of a black person? Some people just love to play the victim. Put on your big boy pants and rewrite your prompt. It's not hard. \u4ec0\u4e48\u662f\u4ea4\u53c9\u6027 (Intersectionality)","title":"Facts n quotes about equality"},{"location":"facts-n-quotes/facts-n-quotes-about-equality/#context","text":"None yet","title":"Context"},{"location":"facts-n-quotes/facts-n-quotes-about-equality/#one-liner","text":"Labels are the opposite of understanding \u4eba\u662f\u571f\u5730\u7684\u9644\u5eb8\uff0c\u8fd8\u662f\u4eba\u662f\u751f\u6d3b\u5728\u571f\u5730\u4e0a\u7684\u4e3b\u4f53\uff0c\u8fd9\u4e24\u4e2a\u7acb\u573a\u89c2\u70b9\u60f3\u4e0d\u6e05\u695a\uff0c\u4e5f\u4e0d\u7528\u6765\u8ba8\u8bba\u65cf\u7fa4\u95ee\u9898\u4e86\u3002 \u6b0a\u529b\u3001\u653f\u5e9c\u3001\u4e3b\u6d41\u4e0d\u9700\u8981\u4f60\u652f\u6301\uff0c\u4f60\u7684\u7a05\u91d1\u548c\u751f\u6d3b\u672c\u8eab\u5c31\u5df2\u7d93\u662f\u3002\u9700\u8981\u7406\u89e3\u540c\u60c5\u548c\u652f\u6301\u7684\u662f\u5f31\u52e2\u548c\u5c0f\u773e\uff0c\u6c38\u9060\u7ad9\u5728\u5f8c\u8005\u7684\u5c0d\u9762\uff0c\u90a3\u5c31\u662f\u6b0a\u529b\u548c\u4e3b\u6d41\u7684\u5e6b\u51f6\u3002 \u5f53\u6211\u4eec\u8bbe\u8ba1\u4e00\u4e2a\u4e3a\u6240\u6709\u4eba\u670d\u52a1\u7684\u4e16\u754c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5973\u6027\u5728\u573a\u3002\u5982\u679c\u90a3\u4e9b\u5bf9\u6211\u4eec\u6240\u6709\u4eba\u4ea7\u751f\u5f71\u54cd\u7684\u51b3\u5b9a\uff0c\u90fd\u662f\u51fa\u81ea\u8eab\u4f53\u5065\u5168\u7684\u767d\u4eba\u7537\u6027\uff08\u4e5d\u6210\u6765\u81ea\u7f8e\u56fd\uff09\uff0c\u90a3\u4e5f\u4f1a\u5f62\u6210\u6570\u636e\u7f3a\u53e3\u2014\u2014\u5c31\u50cf\u5728\u533b\u5b66\u7814\u7a76\u4e2d\u4e0d\u6536\u96c6\u5973\u6027\u8eab\u4f53\u4fe1\u606f\u4f1a\u5f62\u6210\u6570\u636e\u7f3a\u53e3\u4e00\u6837\u3002","title":"One-liner"},{"location":"facts-n-quotes/facts-n-quotes-about-equality/#multi-line","text":"","title":"Multi-line"},{"location":"facts-n-quotes/facts-n-quotes-about-equality/#_1","text":"\u6211\u4eec\u8ffd\u6c42\u666e\u4e16\u4ef7\u503c\uff0c\u662f\u56e0\u4e3a\u666e\u4e16\u4ef7\u503c\u662f\u597d\u7684\uff0c\u662f\u5bf9\u7684\uff0c\u53ea\u8981\u4f60\u662f\u4eba\u7c7b\uff0c\u4f60\u5c31\u5e94\u8be5\u62e5\u6709\u4ed6\u3002\u5982\u679c\u6709\u4eba\u4e0d\u5e78\u5931\u53bb\uff0c\u90a3\u4e48\u5c31\u5e94\u8be5\u5e2e\u52a9\u4ed6\u3002 \u4ee4\u4eba\u96be\u8fc7\u7684\u662f\uff0c\u7531\u4e8e\u4e00\u7cfb\u5217\u5ba2\u89c2\u6761\u4ef6\uff0c\u4e00\u90e8\u5206\u4eba\u65e0\u6cd5\u5bf9\u6b64\u611f\u540c\u8eab\u53d7\u3002\u666e\u4e16\u4ef7\u503c\u548c\u6c11\u65cf\u65e0\u5173\uff0c\u548c\u56fd\u7c4d\u65e0\u5173\uff0c\u5b83\u5c5e\u4e8e\u5168\u4eba\u7c7b\u3002\u4e00\u65e6\u80fd\u610f\u8bc6\u5230\u4e00\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e9b\u4eba\u5c31\u5f88\u5bb9\u6613\u80fd\u8bc6\u7834\u4e00\u4e9b\u5ef6\u7528\u4e86\u8fd1\u534a\u4e2a\u4e16\u7eaa\u7684\u53ef\u7b11\u7684\u501f\u53e3\u548c\u8c0e\u8a00\uff0c\u4ed6\u4eec\u7684\u88ab\u5bb3\u5984\u60f3\u75c7\u4e5f\u7406\u5e94\u4f1a\u88ab\u6cbb\u6108\u3002 \u5f88\u9057\u61be\uff0c\u6211\u5f97\u4e0d\u5230\u5b83\uff0c\u6211\u672c\u5e94\u8be5\u80fd\u4e3a\u6b64\u4e0d\u65ad\u5730\u5199\uff0c\u4e0d\u65ad\u5730\u5199\uff0c\u4f46\u6211\u4e0d\u80fd\u3002\u8fd9\u8ba9\u6211\u96be\u8fc7\u4e86\u5f88\u591a\u5e74\uff0c\u4e00\u76f4\u5230\u73b0\u5728\u3002\u613f\u4e0d\u5728\u610f\u7684\u4eba\u80fd\u4e00\u76f4\u4e0d\u5728\u610f\uff0c\u4ee5\u514d\u906d\u53d7\u8fd9\u79cd\u96be\u8fc7\u3002","title":"\u666e\u4e16\u4ef7\u503c"},{"location":"facts-n-quotes/facts-n-quotes-about-equality/#_2","text":"\u5bf9\u4e8e\u81ea\u5df1\u6240\u5728\u7684\u540c\u7c7b\u91cc\u53d7\u5230\u7684\u82e6\u96be\uff0c\u8981\u653e\u5927\u5230\u7fa4\u4f53\uff0c\u65f6\u95f4\u4e0a\u8ffd\u6eaf\u4e94\u5343\u5e74\uff0c\u7136\u540e\u89c9\u5f97\u81ea\u5df1\u4e5f\u5728\u53d7\u82e6 \u5bf9\u5176\u4ed6\u4eba\u53d7\u5230\u7684\u82e6\u96be\uff0c\u8981\u5177\u5316\u5230\u4e2a\u4eba\uff0c\u65f6\u95f4\u4e0a\u9650\u5236\u5728\u5177\u4f53\u7684\u4e8b\u4ef6\uff0c\u7136\u540e\u89c9\u5f97\u5bf9\u65b9\u65e0\u6cd5\u4ee3\u8868\u6574\u4f53 \u57fa\u4e8e\u8fd9\u79cd\u601d\u7ef4\u903b\u8f91\uff0c\u6784\u5efa\u81ea\u5df1\u7684\u884c\u4e3a\u6a21\u5f0f\uff0c\u4e3b\u52a8\u83b7\u53d6\u7b26\u5408\u81ea\u5df1\u89c2\u70b9\u7684\u4fe1\u606f\u2026\u2026\u5509\u3002","title":"\u4eba\u662f\u4e00\u4e2a\u591a\u4e48\u559c\u6b22\u800c\u4e14\u4e60\u60ef\u4e8e\u5206\u7c7b\u7684\u52a8\u7269"},{"location":"facts-n-quotes/facts-n-quotes-about-equality/#_3","text":"\u5728\u8c08\u5230\u7ef4\u543e\u5c14\u4eba\u65f6\uff0c\u6709\u4e9b\u4eba\u9996\u5148\u662f\u6c49\u4eba\uff0c\u7136\u540e\u624d\u662f\u4eba \u5728\u8c08\u5230\u6027\u522b\u8bae\u9898\u65f6\uff0c\u6709\u4e9b\u4eba\u9996\u5148\u662f\u7537\u4eba\uff0c\u7136\u540e\u624d\u662f\u4eba \u5728\u8c08\u5230\u9999\u6e2f\u65f6\uff0c\u6709\u4e9b\u4eba\u9996\u5148\u662f\u4e2d\u56fd\u4eba\uff0c\u7136\u540e\u624d\u662f\u4eba \u6709\u4e9b\u4eba\u9996\u5148\u662f\u4e2d\u56fd\u7537\u6c49\u4eba\uff0c\u7136\u540e\u624d\u662f\u4eba \u6709\u4e9b\u4eba\u9a6c\u4e0a\u610f\u8bc6\u5230\u81ea\u5df1\u5c31\u662f\u6709\u4e9b\u4eba\uff0c\u7136\u540e\u8df3\u8d77\u6765\u5f00\u59cb\u9a82","title":"\u4eba\u4e4b\u672c"},{"location":"facts-n-quotes/facts-n-quotes-about-equality/#on-image-generation-and-political-correctness","text":"I'm really shocked at the number of people on here who turn into crybabies the moment an unwanted Asian shows up in their image generation results. Like, we live in a society that's built on generations of racial oppression that has caused immense harm to real people and you're mad because you had to look at an image of a black person? Some people just love to play the victim. Put on your big boy pants and rewrite your prompt. It's not hard.","title":"On Image Generation and Political Correctness"},{"location":"facts-n-quotes/facts-n-quotes-about-equality/#intersectionality","text":"","title":"\u4ec0\u4e48\u662f\u4ea4\u53c9\u6027 (Intersectionality)"},{"location":"facts-n-quotes/facts-n-quotes-about-finance/","text":"Context None yet","title":"Facts n quotes about finance"},{"location":"facts-n-quotes/facts-n-quotes-about-finance/#context","text":"None yet","title":"Context"},{"location":"facts-n-quotes/facts-n-quotes-about-health/","text":"Context None yet","title":"Facts n quotes about health"},{"location":"facts-n-quotes/facts-n-quotes-about-health/#context","text":"None yet","title":"Context"},{"location":"facts-n-quotes/facts-n-quotes-about-love/","text":"Context None yet","title":"Facts n quotes about love"},{"location":"facts-n-quotes/facts-n-quotes-about-love/#context","text":"None yet","title":"Context"},{"location":"facts-n-quotes/facts-n-quotes-about-mind/","text":"Context None yet","title":"Facts n quotes about mind"},{"location":"facts-n-quotes/facts-n-quotes-about-mind/#context","text":"None yet","title":"Context"},{"location":"facts-n-quotes/facts-n-quotes-about-organism/","text":"Context None yet","title":"Facts n quotes about organism"},{"location":"facts-n-quotes/facts-n-quotes-about-organism/#context","text":"None yet","title":"Context"},{"location":"facts-n-quotes/facts-n-quotes-about-politics/","text":"Context None yet","title":"Facts n quotes about politics"},{"location":"facts-n-quotes/facts-n-quotes-about-politics/#context","text":"None yet","title":"Context"},{"location":"facts-n-quotes/facts-n-quotes-about-universe/","text":"Context None yet","title":"Facts n quotes about universe"},{"location":"facts-n-quotes/facts-n-quotes-about-universe/#context","text":"None yet","title":"Context"},{"location":"hands-on/core-csharp-n-dotnet/","text":"Context I want to explain all the concepts in an ultra-clear-n-simple way All the sample code along with these were standalone runnable C# script Boxing v Unboxing also, Value v Reference Type Conversion between value type and reference types, boxing bridging them together to provide a uniform type system that were all derived from Object. Sometimes we store value type within reference type variables, we need boxing to put it in, and unboxing it when in need of accessing it. Value of value type copies over value itself on the stack. Whereas reference types were stored on the heap. If we were to use Generics, explicitly declaring the types being stored, we no longer need the boxing/unboxing. Value Types | +--------------+ | | Boxing Unboxing | | \u2b07\ufe0f \u2b06\ufe0f +--------------+ | Reference Types Destructors WIP sample code ~ClassName { clean up } Finalizers are NOT guaranteed to be called It\u2019s implementation-specific (quote) For my case? It means that I won\u2019t get the debugging output from customized finalizers. For production? We\u2019ll do more testing then References observations made on this wording changes detailed back-n-forth discussions : IDisposable + public void Dispose == using (..) {} using is a syntactic sugar for try .. finally .. Dispose is a method that cleans up the resources IDisposable is an interface that defines the Dispose method try .. catch .. finally .. catch acts as built-in exception handling in comparison to others finally block could do the same thing but might not be universal/organized const v readonly literally constant, limited val types Freer, all kinds of types this v base sample code base calls mother class\u2019 thingy this calls current class\u2019 methods/vars Generics v Overload generics ensure uniformity overloading get you more than handling different types, but also methods with different length of parameters List WIP ICollection \u27a1\ufe0f IList \u27a1\ufe0f List Each with different set of methods impl_ed Copy v Clone sample code One is shallow, one is (usually) deep One gets a new obj that points to the same memory address of the object you are copying, one gets a completely new object, all built from scratch Customizing your DeepCopy would get you more flexibility than IClonable with Clone Interface v Abstract Class sample code interface defines contracts you need to fullfil, and there might be multiple of them interface has no fields abstract defines a common base class with potentially partial implementation abstract has fields as they are classes ref v out sample code ref variables along with ref would affect the original out pouring out a variable to the function-invocation scope Extension Method sample code this TypeName obj is all that matters, anything else were just conventions Loosely attaching customized methods to existing classes Built-in types? Yeah! Custom classes? Sure! On projects and scripts Gotta use the public static class XyzExtensions { .. } Just public static void MethodName(this ClassName obj) { .. } for scripts Partial n Sealed Class sample code partial class allow classes be written in seperate places, even files partial class's implementations were merged at compile time sealed class prevents inheritance (the ) Indexer sample code kinda just a syntax sugar for easier accessing/manipulating elements cleaner implementation for getting/setting elements in a class","title":"Core csharp n dotnet"},{"location":"hands-on/core-csharp-n-dotnet/#context","text":"I want to explain all the concepts in an ultra-clear-n-simple way All the sample code along with these were standalone runnable C# script","title":"Context"},{"location":"hands-on/core-csharp-n-dotnet/#boxing-v-unboxing","text":"also, Value v Reference Type Conversion between value type and reference types, boxing bridging them together to provide a uniform type system that were all derived from Object. Sometimes we store value type within reference type variables, we need boxing to put it in, and unboxing it when in need of accessing it. Value of value type copies over value itself on the stack. Whereas reference types were stored on the heap. If we were to use Generics, explicitly declaring the types being stored, we no longer need the boxing/unboxing. Value Types | +--------------+ | | Boxing Unboxing | | \u2b07\ufe0f \u2b06\ufe0f +--------------+ | Reference Types","title":"Boxing v Unboxing"},{"location":"hands-on/core-csharp-n-dotnet/#destructors","text":"WIP sample code","title":"Destructors"},{"location":"hands-on/core-csharp-n-dotnet/#classname-clean-up","text":"Finalizers are NOT guaranteed to be called It\u2019s implementation-specific (quote) For my case? It means that I won\u2019t get the debugging output from customized finalizers. For production? We\u2019ll do more testing then References observations made on this wording changes detailed back-n-forth discussions","title":"~ClassName { clean up }"},{"location":"hands-on/core-csharp-n-dotnet/#idisposable-public-void-dispose","text":"== using (..) {} using is a syntactic sugar for try .. finally .. Dispose is a method that cleans up the resources IDisposable is an interface that defines the Dispose method","title":": IDisposable + public void Dispose"},{"location":"hands-on/core-csharp-n-dotnet/#try-catch-finally","text":"catch acts as built-in exception handling in comparison to others finally block could do the same thing but might not be universal/organized","title":"try .. catch .. finally .."},{"location":"hands-on/core-csharp-n-dotnet/#const-v-readonly","text":"literally constant, limited val types Freer, all kinds of types","title":"const v readonly"},{"location":"hands-on/core-csharp-n-dotnet/#this-v-base","text":"sample code base calls mother class\u2019 thingy this calls current class\u2019 methods/vars","title":"this v base"},{"location":"hands-on/core-csharp-n-dotnet/#generics-v-overload","text":"generics ensure uniformity overloading get you more than handling different types, but also methods with different length of parameters","title":"Generics v Overload"},{"location":"hands-on/core-csharp-n-dotnet/#list","text":"WIP ICollection \u27a1\ufe0f IList \u27a1\ufe0f List Each with different set of methods impl_ed","title":"List"},{"location":"hands-on/core-csharp-n-dotnet/#copy-v-clone","text":"sample code One is shallow, one is (usually) deep One gets a new obj that points to the same memory address of the object you are copying, one gets a completely new object, all built from scratch Customizing your DeepCopy would get you more flexibility than IClonable with Clone","title":"Copy v Clone"},{"location":"hands-on/core-csharp-n-dotnet/#interface-v-abstract-class","text":"sample code interface defines contracts you need to fullfil, and there might be multiple of them interface has no fields abstract defines a common base class with potentially partial implementation abstract has fields as they are classes","title":"Interface v Abstract Class"},{"location":"hands-on/core-csharp-n-dotnet/#ref-v-out","text":"sample code ref variables along with ref would affect the original out pouring out a variable to the function-invocation scope","title":"ref v out"},{"location":"hands-on/core-csharp-n-dotnet/#extension-method","text":"sample code this TypeName obj is all that matters, anything else were just conventions Loosely attaching customized methods to existing classes Built-in types? Yeah! Custom classes? Sure! On projects and scripts Gotta use the public static class XyzExtensions { .. } Just public static void MethodName(this ClassName obj) { .. } for scripts","title":"Extension Method"},{"location":"hands-on/core-csharp-n-dotnet/#partial-n-sealed-class","text":"sample code partial class allow classes be written in seperate places, even files partial class's implementations were merged at compile time sealed class prevents inheritance (the )","title":"Partial n Sealed Class"},{"location":"hands-on/core-csharp-n-dotnet/#indexer","text":"sample code kinda just a syntax sugar for easier accessing/manipulating elements cleaner implementation for getting/setting elements in a class","title":"Indexer"},{"location":"hands-on/core-database/","text":"Context I'm NOT a DB dev I rarely operate on DB directly (I use ORM) I believe if you didn't type the commands on the existing DB, it was all theory I wanted to learn more about DB It was fun Heavily made use of LLM s (alongside StackOverflow n Wikipedia) Overview of a Database Transport Layer accepting n managing incoming requents, like/is an always-running server check the mock implementation in Python Query Processor TBD Execution Engine TBD Storage Engine TBD What's Up with the MVCC Full form: M ulti v ersion c oncurrency c ontrol Databases are designed to be concurrent access/update, by users, by transactions and so on when accessing some record, others might be updating it action of updating takes time order of updating matters we might consider block it after writers are done the transactions for read/update might be a huge one this was achieved using locks this would cause contention (subjects fight over something) MVCC is more of an addtional tool helping with concurrency IMO, it was meant to be used in conjunction with locks It does three main things, IMO > All got a hidden timestamp/transaction id to ensure uniqueness Read get the most recent ver. of the record, no blocking might not be the latest (someone might be updating it) Write current operation creates new ver (with timestamp or transaction ID), no blocking Older versions are still available for reading Garbage collection the older versions were stored in the undo log for InnoDB in MySQL, it's a process that runs periodically For the case explained above, Isolation Level came into play, context below Different types of them for different strictness levels Categorized by read phenomenon (~=how bad is it) Scenarios mentioned above were Snapshot Isolation reference needed Different DB have widely different default isolation levels How a Database Query is Done Supopose we were using MySQL (with the InnoDB storage engine) Client \u2502 \u25bc MySQL Server \u2502 \u251c\u2500 Parser \u2502 \u251c\u2500 Optimizer \u2502 \u251c\u2500 Execution Engine \u2502 \u2502 \u2502 \u2514\u2500 Storage Engine API \u2502 \u2502 \u2502 \u25bc \u2514\u2500 Storage Engine (e.g., InnoDB) \u2502 \u25bc Data Files How a SQL Query is Done Suppose we have a query like this SELECT employees.name, COUNT(projects.project_id) as project_count FROM employees JOIN projects ON employees.id = projects.employee_id WHERE employees.salary > 20000 GROUP BY employees.name HAVING COUNT(projects.project_id) > 5 ORDER BY project_count DESC; The process of executing the query is as follows FROM the employee table With JOIN ing the projects table ON employee_id column Filter WHERE the salary is greater than 20000 GROUP BY the employee 's name HAVING project s the employee s working on is greater than 5 ORDER BY the number of project s the employee is working on in descending order Common Index Types B+ Tree Index (default for MySQL InnoDB) most common, efficient enough support both exact and range queries Hash Index only avialable for Memory tables only support exact lookups ( = , IN ) Full-Text Index I'll write the notes once I've done the hands-on testing ;P Spatial Index I'll write the notes once I've done the hands-on testing ;P Renaming a Database I guess it wasn't normally done. I purely changed it for the sake of learning. Get the new one created before renaming CREATE DATABASE testdb; Generate the script based on the existing database SELECT CONCAT( 'RENAME TABLE ','`\u65e7\u5e93`','.`',TABLE_NAME, '` TO ','`testdb`.`',TABLE_NAME,'`;' ) FROM information_schema.TABLES WHERE table_schema LIKE '\u65e7\u5e93'; Run the script USE `\u65e7\u5e93`; -- the SQL generated from the previous step Table Partitioning Context I wasn't in a position to do this in production, but I still wanted to learn about it. So I got a local MySQL database in Docker and tried it out. all normal CRUDs would be exactly the same if not considering efficient queries. Firstly, it was normally done in the design phase with the table creation so that it knows which table it was operating on. CREATE TABLE Quotes ( row_id INT AUTO_INCREMENT, creator VARCHAR(255), quotes VARCHAR(255), created DATE, PRIMARY KEY (row_id, created) ) PARTITION BY RANGE (YEAR(created)) ( PARTITION p2019 VALUES LESS THAN (2020), PARTITION p2020 VALUES LESS THAN (2021), PARTITION p2021 VALUES LESS THAN (2022), PARTITION p2022 VALUES LESS THAN (2023), PARTITION p2023 VALUES LESS THAN (2024), PARTITION p2024 VALUES LESS THAN (2025) ); Secondly making sure it was properly done, logically, in detail SELECT * FROM information_schema.PARTITIONS WHERE TABLE_SCHEMA = 'testdb' AND TABLE_NAME = 'Quotes'; Checking how it was done, physically, in the file system If you were like me, using MySQL Docker and be able to access the container # enter the shell docker exec -it mysql sh # testdb is your database name # quotes is your table name ls /var/lib/mysql/testdb | grep -i quotes # you are expected to see something like this # /var/lib/mysql/testdb/ # \u251c\u2500\u2500 Quotes#P#p2019.ibd # \u251c\u2500\u2500 Quotes#P#p2020.ibd # \u251c\u2500\u2500 Quotes#P#p2021.ibd # \u251c\u2500\u2500 Quotes#P#p2022.ibd # \u251c\u2500\u2500 Quotes#P#p2023.ibd # \u2514\u2500\u2500 Quotes#P#p2024.ibd issues I've faced when operating on an existing table with complex relations (conclusion: not reading the docs long/carefully enough; should have done it in the design phase) Foreign keys are not yet supported in conjunction with partitioning A PRIMARY KEY must include all columns in the table's partitioning function (prefixed columns are not considered). .. Get Sample Data for a Table The last line is the one you need to edit to match your table schema USE `testdb`; DELIMITER // CREATE PROCEDURE GenerateSampleData(IN dbName VARCHAR(255), IN tableName VARCHAR(255)) BEGIN DECLARE i INT DEFAULT 0; DECLARE randomName VARCHAR(255); DECLARE randomQuote VARCHAR(255); DECLARE randomDate DATE; DECLARE nameList VARCHAR(255) DEFAULT 'Alice,Bob,Charlie,David,Eve,Frank,Grace,Hank,Ivy,Jack'; DECLARE quoteList VARCHAR(255) DEFAULT 'Sample quote 1.,Sample quote 2.,Sample quote 3.,Sample quote 4.,Sample quote 5.'; WHILE i < 100000 DO SET randomName = ELT(1 + FLOOR(RAND() * 10), 'Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Hank', 'Ivy', 'Jack'); SET randomQuote = ELT(1 + FLOOR(RAND() * 5), 'Sample quote 1.', 'Sample quote 2.', 'Sample quote 3.', 'Sample quote 4.', 'Sample quote 5.'); SET randomDate = DATE_ADD('2019-01-01', INTERVAL FLOOR(RAND() * 1825) DAY); -- Random date between 2019 and 2024 SET @insertQuery = CONCAT('INSERT INTO ', dbName, '.', tableName, ' (creator, quotes, created) VALUES (''', randomName, ''', ''', randomQuote, ''', ''', randomDate, ''')'); PREPARE stmt FROM @insertQuery; EXECUTE stmt; DEALLOCATE PREPARE stmt; SET i = i + 1; END WHILE; END // DELIMITER ; -- the DB wasn't specfial, just run `CREATE DATABASE testdb;` before this -- the table definition shall be the same as **table partitioning** section CALL GenerateSampleData('testdb', 'Quotes');","title":"Core database"},{"location":"hands-on/core-database/#context","text":"I'm NOT a DB dev I rarely operate on DB directly (I use ORM) I believe if you didn't type the commands on the existing DB, it was all theory I wanted to learn more about DB It was fun Heavily made use of LLM s (alongside StackOverflow n Wikipedia)","title":"Context"},{"location":"hands-on/core-database/#overview-of-a-database","text":"","title":"Overview of a Database"},{"location":"hands-on/core-database/#transport-layer","text":"accepting n managing incoming requents, like/is an always-running server check the mock implementation in Python","title":"Transport Layer"},{"location":"hands-on/core-database/#query-processor","text":"TBD","title":"Query Processor"},{"location":"hands-on/core-database/#execution-engine","text":"TBD","title":"Execution Engine"},{"location":"hands-on/core-database/#storage-engine","text":"TBD","title":"Storage Engine"},{"location":"hands-on/core-database/#whats-up-with-the-mvcc","text":"Full form: M ulti v ersion c oncurrency c ontrol","title":"What's Up with the MVCC"},{"location":"hands-on/core-database/#databases-are-designed-to-be-concurrent","text":"access/update, by users, by transactions and so on when accessing some record, others might be updating it action of updating takes time order of updating matters we might consider block it after writers are done the transactions for read/update might be a huge one this was achieved using locks this would cause contention (subjects fight over something)","title":"Databases are designed to be concurrent"},{"location":"hands-on/core-database/#mvcc-is-more-of-an-addtional-tool-helping-with-concurrency","text":"IMO, it was meant to be used in conjunction with locks It does three main things, IMO > All got a hidden timestamp/transaction id to ensure uniqueness Read get the most recent ver. of the record, no blocking might not be the latest (someone might be updating it) Write current operation creates new ver (with timestamp or transaction ID), no blocking Older versions are still available for reading Garbage collection the older versions were stored in the undo log for InnoDB in MySQL, it's a process that runs periodically For the case explained above, Isolation Level came into play, context below Different types of them for different strictness levels Categorized by read phenomenon (~=how bad is it) Scenarios mentioned above were Snapshot Isolation reference needed Different DB have widely different default isolation levels","title":"MVCC is more of an addtional tool helping with concurrency"},{"location":"hands-on/core-database/#how-a-database-query-is-done","text":"Supopose we were using MySQL (with the InnoDB storage engine) Client \u2502 \u25bc MySQL Server \u2502 \u251c\u2500 Parser \u2502 \u251c\u2500 Optimizer \u2502 \u251c\u2500 Execution Engine \u2502 \u2502 \u2502 \u2514\u2500 Storage Engine API \u2502 \u2502 \u2502 \u25bc \u2514\u2500 Storage Engine (e.g., InnoDB) \u2502 \u25bc Data Files","title":"How a Database Query is Done"},{"location":"hands-on/core-database/#how-a-sql-query-is-done","text":"Suppose we have a query like this SELECT employees.name, COUNT(projects.project_id) as project_count FROM employees JOIN projects ON employees.id = projects.employee_id WHERE employees.salary > 20000 GROUP BY employees.name HAVING COUNT(projects.project_id) > 5 ORDER BY project_count DESC; The process of executing the query is as follows FROM the employee table With JOIN ing the projects table ON employee_id column Filter WHERE the salary is greater than 20000 GROUP BY the employee 's name HAVING project s the employee s working on is greater than 5 ORDER BY the number of project s the employee is working on in descending order","title":"How a SQL Query is Done"},{"location":"hands-on/core-database/#common-index-types","text":"B+ Tree Index (default for MySQL InnoDB) most common, efficient enough support both exact and range queries Hash Index only avialable for Memory tables only support exact lookups ( = , IN ) Full-Text Index I'll write the notes once I've done the hands-on testing ;P Spatial Index I'll write the notes once I've done the hands-on testing ;P","title":"Common Index Types"},{"location":"hands-on/core-database/#renaming-a-database","text":"I guess it wasn't normally done. I purely changed it for the sake of learning. Get the new one created before renaming CREATE DATABASE testdb; Generate the script based on the existing database SELECT CONCAT( 'RENAME TABLE ','`\u65e7\u5e93`','.`',TABLE_NAME, '` TO ','`testdb`.`',TABLE_NAME,'`;' ) FROM information_schema.TABLES WHERE table_schema LIKE '\u65e7\u5e93'; Run the script USE `\u65e7\u5e93`; -- the SQL generated from the previous step","title":"Renaming a Database"},{"location":"hands-on/core-database/#table-partitioning","text":"","title":"Table Partitioning"},{"location":"hands-on/core-database/#context_1","text":"I wasn't in a position to do this in production, but I still wanted to learn about it. So I got a local MySQL database in Docker and tried it out. all normal CRUDs would be exactly the same if not considering efficient queries. Firstly, it was normally done in the design phase with the table creation so that it knows which table it was operating on. CREATE TABLE Quotes ( row_id INT AUTO_INCREMENT, creator VARCHAR(255), quotes VARCHAR(255), created DATE, PRIMARY KEY (row_id, created) ) PARTITION BY RANGE (YEAR(created)) ( PARTITION p2019 VALUES LESS THAN (2020), PARTITION p2020 VALUES LESS THAN (2021), PARTITION p2021 VALUES LESS THAN (2022), PARTITION p2022 VALUES LESS THAN (2023), PARTITION p2023 VALUES LESS THAN (2024), PARTITION p2024 VALUES LESS THAN (2025) ); Secondly making sure it was properly done, logically, in detail SELECT * FROM information_schema.PARTITIONS WHERE TABLE_SCHEMA = 'testdb' AND TABLE_NAME = 'Quotes'; Checking how it was done, physically, in the file system If you were like me, using MySQL Docker and be able to access the container # enter the shell docker exec -it mysql sh # testdb is your database name # quotes is your table name ls /var/lib/mysql/testdb | grep -i quotes # you are expected to see something like this # /var/lib/mysql/testdb/ # \u251c\u2500\u2500 Quotes#P#p2019.ibd # \u251c\u2500\u2500 Quotes#P#p2020.ibd # \u251c\u2500\u2500 Quotes#P#p2021.ibd # \u251c\u2500\u2500 Quotes#P#p2022.ibd # \u251c\u2500\u2500 Quotes#P#p2023.ibd # \u2514\u2500\u2500 Quotes#P#p2024.ibd issues I've faced when operating on an existing table with complex relations (conclusion: not reading the docs long/carefully enough; should have done it in the design phase) Foreign keys are not yet supported in conjunction with partitioning A PRIMARY KEY must include all columns in the table's partitioning function (prefixed columns are not considered). ..","title":"Context"},{"location":"hands-on/core-database/#get-sample-data-for-a-table","text":"The last line is the one you need to edit to match your table schema USE `testdb`; DELIMITER // CREATE PROCEDURE GenerateSampleData(IN dbName VARCHAR(255), IN tableName VARCHAR(255)) BEGIN DECLARE i INT DEFAULT 0; DECLARE randomName VARCHAR(255); DECLARE randomQuote VARCHAR(255); DECLARE randomDate DATE; DECLARE nameList VARCHAR(255) DEFAULT 'Alice,Bob,Charlie,David,Eve,Frank,Grace,Hank,Ivy,Jack'; DECLARE quoteList VARCHAR(255) DEFAULT 'Sample quote 1.,Sample quote 2.,Sample quote 3.,Sample quote 4.,Sample quote 5.'; WHILE i < 100000 DO SET randomName = ELT(1 + FLOOR(RAND() * 10), 'Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Hank', 'Ivy', 'Jack'); SET randomQuote = ELT(1 + FLOOR(RAND() * 5), 'Sample quote 1.', 'Sample quote 2.', 'Sample quote 3.', 'Sample quote 4.', 'Sample quote 5.'); SET randomDate = DATE_ADD('2019-01-01', INTERVAL FLOOR(RAND() * 1825) DAY); -- Random date between 2019 and 2024 SET @insertQuery = CONCAT('INSERT INTO ', dbName, '.', tableName, ' (creator, quotes, created) VALUES (''', randomName, ''', ''', randomQuote, ''', ''', randomDate, ''')'); PREPARE stmt FROM @insertQuery; EXECUTE stmt; DEALLOCATE PREPARE stmt; SET i = i + 1; END WHILE; END // DELIMITER ; -- the DB wasn't specfial, just run `CREATE DATABASE testdb;` before this -- the table definition shall be the same as **table partitioning** section CALL GenerateSampleData('testdb', 'Quotes');","title":"Get Sample Data for a Table"},{"location":"hands-on/core-frontend/","text":"Context Who wouldn't want an employee who could do both the frontend and backend? I wanted to learn more about frontend It was fun \u6d4f\u89c8\u5668\u4e4b\u65c5 TBD","title":"Core frontend"},{"location":"hands-on/core-frontend/#context","text":"Who wouldn't want an employee who could do both the frontend and backend? I wanted to learn more about frontend It was fun","title":"Context"},{"location":"hands-on/core-frontend/#_1","text":"TBD","title":"\u6d4f\u89c8\u5668\u4e4b\u65c5"},{"location":"hands-on/core-network/","text":"Context It was fun Heavily made use of LLM s (alongside StackOverflow n Wikipedia) Cookie v Session Cookie stored in the browser got check via document.cookie in the browser console types allowed: text only (key value pairs) limited size, commonly less than 4093 bytes under a domain limited number of cookies per domain, ranged from 60 to 600 (data might be stable, as I had NOT tested it myself) the spec HTTP State Management Mechanism did NOT specify the size limit search for 6.3 the exact size limit is implementation-specific, test your own here in practice, different types of the cookie simply differs in different keys // Session Cookie document.cookie = \"sessionToken=ABC123; path=/; SameSite=Lax\"; // Persistent Cookie for 7 days var date = new Date(); date.setTime(date.getTime() + (7*24*60*60*1000)); // 7 days from now var expires = \"expires=\" + date.toUTCString(); document.cookie = \"persistentToken=XYZ456; path=/; \" + expires + \"; SameSite=Lax\"; // Secure Cookie document.cookie = \"secureToken=DEF789; path=/; Secure; SameSite=Lax\"; // HttpOnly Cookie (must be set via server) // SameSite Cookies document.cookie = \"sameSiteToken=LaxValue; path=/; SameSite=Lax\"; document.cookie = \"sameSiteToken2=StrictValue; path=/; SameSite=Strict\"; document.cookie = \"sameSiteToken3=NoneValue; path=/; SameSite=None; Secure\"; // Viewing all cookies console.log(document.cookie); categorized by expiration time, session cookie n persistent cookie (physically exists) categorized by origin, first-party cookie n third-party cookie categorized by feature essential (like products in cart) analytics (like Google Analytics or ADs) functional (like language choice) Session stored in the server gotta have your own way to see the session data types allowed: any types, any ways you wanna save (depends on the language) \"unlimited\" size think of it as putting a small box in a warehouse it could fill up, but normally it wouldn't be the one that fills up in practice, sessions were stored and interpreted however you want After all, it's just a way for you to identify the user with handful of stuff in the data categorize by storage type server-side session (client's cookie got a session ID matching with server) client-side session (you can do it via cookie/LocalStorage, but that defeats the entire purpose of sessions) categorize by implementation via cookie: a session ID in the cookie matching with the server-side session via URL: https://example.com/login?sessionId=ABC123 (~= via cookie ) via database: almost the same thing as via cookie , but being persisted","title":"Core network"},{"location":"hands-on/core-network/#context","text":"It was fun Heavily made use of LLM s (alongside StackOverflow n Wikipedia)","title":"Context"},{"location":"hands-on/core-network/#cookie-v-session","text":"","title":"Cookie v Session"},{"location":"hands-on/core-network/#cookie","text":"stored in the browser got check via document.cookie in the browser console types allowed: text only (key value pairs) limited size, commonly less than 4093 bytes under a domain limited number of cookies per domain, ranged from 60 to 600 (data might be stable, as I had NOT tested it myself) the spec HTTP State Management Mechanism did NOT specify the size limit search for 6.3 the exact size limit is implementation-specific, test your own here in practice, different types of the cookie simply differs in different keys // Session Cookie document.cookie = \"sessionToken=ABC123; path=/; SameSite=Lax\"; // Persistent Cookie for 7 days var date = new Date(); date.setTime(date.getTime() + (7*24*60*60*1000)); // 7 days from now var expires = \"expires=\" + date.toUTCString(); document.cookie = \"persistentToken=XYZ456; path=/; \" + expires + \"; SameSite=Lax\"; // Secure Cookie document.cookie = \"secureToken=DEF789; path=/; Secure; SameSite=Lax\"; // HttpOnly Cookie (must be set via server) // SameSite Cookies document.cookie = \"sameSiteToken=LaxValue; path=/; SameSite=Lax\"; document.cookie = \"sameSiteToken2=StrictValue; path=/; SameSite=Strict\"; document.cookie = \"sameSiteToken3=NoneValue; path=/; SameSite=None; Secure\"; // Viewing all cookies console.log(document.cookie); categorized by expiration time, session cookie n persistent cookie (physically exists) categorized by origin, first-party cookie n third-party cookie categorized by feature essential (like products in cart) analytics (like Google Analytics or ADs) functional (like language choice)","title":"Cookie"},{"location":"hands-on/core-network/#session","text":"stored in the server gotta have your own way to see the session data types allowed: any types, any ways you wanna save (depends on the language) \"unlimited\" size think of it as putting a small box in a warehouse it could fill up, but normally it wouldn't be the one that fills up in practice, sessions were stored and interpreted however you want After all, it's just a way for you to identify the user with handful of stuff in the data categorize by storage type server-side session (client's cookie got a session ID matching with server) client-side session (you can do it via cookie/LocalStorage, but that defeats the entire purpose of sessions) categorize by implementation via cookie: a session ID in the cookie matching with the server-side session via URL: https://example.com/login?sessionId=ABC123 (~= via cookie ) via database: almost the same thing as via cookie , but being persisted","title":"Session"},{"location":"hands-on/core-operatingsystem/","text":"Context None yet Signals Resources Signal Handling (The GNU C Library) Concepts Simplified WIP A form of IPC A way to communicate between processes A way to setup listen up, X happens, do Y A way to setup if receives signal X, call function Y Mostly used and seen in program termination","title":"Core operatingsystem"},{"location":"hands-on/core-operatingsystem/#context","text":"None yet","title":"Context"},{"location":"hands-on/core-operatingsystem/#signals","text":"","title":"Signals"},{"location":"hands-on/core-operatingsystem/#resources","text":"Signal Handling (The GNU C Library)","title":"Resources"},{"location":"hands-on/core-operatingsystem/#concepts-simplified","text":"WIP A form of IPC A way to communicate between processes A way to setup listen up, X happens, do Y A way to setup if receives signal X, call function Y Mostly used and seen in program termination","title":"Concepts Simplified"},{"location":"hands-on/random-extjs-overview/","text":"Metadata Version 4.2 Documentation here Scenarios and Thoughts Create and configure the data source var store = Ext.create( 'Ext.data.Store', { [ 'id', 'name' ], getWhatFromWhereInHow: { \u5f02\u6b65, 'File/Func', { root: 'data' } (\u91ccid/name) }, autoReqAndLoadDataInTheVariable } ) Use existing component var win = Ext.create('userDefinedComponent', { tweaks }) win.loadData(); // <- Ext.apply(this, { k:v, I: impl }) win.show(); // <- extend: 'Ext.window.Window' // 0. It is always listening to various events // 1. You close the component // 2. It calls .close (.window.Window -> .panel.Panel) // 3. It fires up the 'close' event // 4. It runs code you have defined win.on('close', function() { .. }); Toolbars // At the top, commonly for CRUD operations tbar: [ { xtype: 'button', text: 'Button 1' } { customButton } ] var customButton = Ext.create( 'Ext.button.Button', { \u6309\u94ae\u540d // e.g. \u5bfc\u5165 \u6309\u94ae\u56fe\u6807 // e.g. icon-export \u6309\u4e0b\u53bb\u505a\u4ec0\u4e48 // e.g. set var, call func } ) // At the bottom, commonly used for paging bbar: Ext.create( 'Ext.PagingToolbar', { dataSource displayPagingInfo } ) Grand Layout { region: \"center\" // ~= left region: \"east\" region: \"north\" flex: 1 } Components inside components var withShorthand = Ext.create('Ext.Container', { region: 'north', border: false, height: 36, items: [{ xtype: 'form', layout: 'hbox', defaults: { margin: 3 }, items: [ { xtype: 'textfield', fieldLabel: 'Name' }, { xtype: 'button', text: 'Submit' }] }] }); var withoutShorthand = Ext.create('Ext.Container', { region: 'north', border: false, height: 36, items: [ Ext.create('Ext.form.Panel', { layout: Ext.create('Ext.layout.container.HBox'), defaults: { margin: 3 }, items: [ Ext.create('Ext.form.field.Text', { fieldLabel: 'Name' }), Ext.create('Ext.button.Button', { text: 'Submit' }) ] }) ] }); Grid/Table with listener selectionchange // Table -> [[Supercharged]] -> Grid (fetch/sort/filter/..) // Models like Ext.selection.xxModel // classes were imported via 'uses: []' by the Table // events fired by the xxModel will be relayed to the Table // implementation needed to handle the events in the listeners var sampleGrid = Ext.create( 'ZAN.BrandManagement.BrandGrid', { \u540d\u79f0 \u6bd4\u4f8b \u533a\u57df \u5177\u680f listeners: { // selModel Ext.selection.Model .getCount, getStore // records Ext.data.Model [0].get('id') selectionchange: function (selModel, records) { if (!Ext.isEmpty(selectedRecord)) { // Always an array even with one item selectedRecord[0].get('Name'); selectedRecord[0].get('Id'); } } } ); Methods seen from Ext.form.Panel // .up // .down // .setDisabled (universal)","title":"Random extjs overview"},{"location":"hands-on/random-extjs-overview/#metadata","text":"Version 4.2 Documentation here","title":"Metadata"},{"location":"hands-on/random-extjs-overview/#scenarios-and-thoughts","text":"Create and configure the data source var store = Ext.create( 'Ext.data.Store', { [ 'id', 'name' ], getWhatFromWhereInHow: { \u5f02\u6b65, 'File/Func', { root: 'data' } (\u91ccid/name) }, autoReqAndLoadDataInTheVariable } ) Use existing component var win = Ext.create('userDefinedComponent', { tweaks }) win.loadData(); // <- Ext.apply(this, { k:v, I: impl }) win.show(); // <- extend: 'Ext.window.Window' // 0. It is always listening to various events // 1. You close the component // 2. It calls .close (.window.Window -> .panel.Panel) // 3. It fires up the 'close' event // 4. It runs code you have defined win.on('close', function() { .. }); Toolbars // At the top, commonly for CRUD operations tbar: [ { xtype: 'button', text: 'Button 1' } { customButton } ] var customButton = Ext.create( 'Ext.button.Button', { \u6309\u94ae\u540d // e.g. \u5bfc\u5165 \u6309\u94ae\u56fe\u6807 // e.g. icon-export \u6309\u4e0b\u53bb\u505a\u4ec0\u4e48 // e.g. set var, call func } ) // At the bottom, commonly used for paging bbar: Ext.create( 'Ext.PagingToolbar', { dataSource displayPagingInfo } ) Grand Layout { region: \"center\" // ~= left region: \"east\" region: \"north\" flex: 1 } Components inside components var withShorthand = Ext.create('Ext.Container', { region: 'north', border: false, height: 36, items: [{ xtype: 'form', layout: 'hbox', defaults: { margin: 3 }, items: [ { xtype: 'textfield', fieldLabel: 'Name' }, { xtype: 'button', text: 'Submit' }] }] }); var withoutShorthand = Ext.create('Ext.Container', { region: 'north', border: false, height: 36, items: [ Ext.create('Ext.form.Panel', { layout: Ext.create('Ext.layout.container.HBox'), defaults: { margin: 3 }, items: [ Ext.create('Ext.form.field.Text', { fieldLabel: 'Name' }), Ext.create('Ext.button.Button', { text: 'Submit' }) ] }) ] }); Grid/Table with listener selectionchange // Table -> [[Supercharged]] -> Grid (fetch/sort/filter/..) // Models like Ext.selection.xxModel // classes were imported via 'uses: []' by the Table // events fired by the xxModel will be relayed to the Table // implementation needed to handle the events in the listeners var sampleGrid = Ext.create( 'ZAN.BrandManagement.BrandGrid', { \u540d\u79f0 \u6bd4\u4f8b \u533a\u57df \u5177\u680f listeners: { // selModel Ext.selection.Model .getCount, getStore // records Ext.data.Model [0].get('id') selectionchange: function (selModel, records) { if (!Ext.isEmpty(selectedRecord)) { // Always an array even with one item selectedRecord[0].get('Name'); selectedRecord[0].get('Id'); } } } ); Methods seen from Ext.form.Panel // .up // .down // .setDisabled (universal)","title":"Scenarios and Thoughts"}]}