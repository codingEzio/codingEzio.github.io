{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome A trashy blog written by a human. Available Posts Built via mkdocs gh-deploy --site-dir build-output C# and .NET Ext.js Project layout mkdocs.yml # Blog configuration. hands-on/ # Bits of code examples. docs/ index.md # Homepage. hands-on/ # Concepts in practice. quotes-n-trivias/ # Random quotes and trivias.","title":"Home"},{"location":"#welcome","text":"A trashy blog written by a human.","title":"Welcome"},{"location":"#available-posts","text":"Built via mkdocs gh-deploy --site-dir build-output C# and .NET Ext.js","title":"Available Posts"},{"location":"#project-layout","text":"mkdocs.yml # Blog configuration. hands-on/ # Bits of code examples. docs/ index.md # Homepage. hands-on/ # Concepts in practice. quotes-n-trivias/ # Random quotes and trivias.","title":"Project layout"},{"location":"hands-on/core-csharp-n-dotnet/","text":"Boxing v Unboxing, Value v Reference Type Conversion between value type and reference types, boxing bridging them together to provide a uniform type system that were all derived from Object. Sometimes we store value type within reference type variables, we need boxing to put it in, and unboxing it when in need of accessing it. Value of value type copies over value itself on the stack. Whereas reference types were stored on the heap. If we were to use Generics, explicitly declaring the types being stored, we no longer need the boxing/unboxing. Value Types | +--------------+ | | Boxing Unboxing | | \u2b07\ufe0f \u2b06\ufe0f +--------------+ | Reference Types Destructors ~ClassName { clean up } : IDisposable + public void Dispose using (..) {} d// auto clean up try .. catch .. finally .. const v readonly literally constant, limited val types Freer, all kinds of types this v base base calls mother class\u2019 thingy this calls current class\u2019 methods/vars generics v overload generics ensure uniformity overloading get you more than handling different types, but also methods with different length of parameters List ICollection \ud83d\udc49 IList \ud83d\udc49 List Each with different set of methods impl_ed Copy v Clone One shallow, one deep One gets a new obj that points to the same memory address of the object you are copying,","title":"Core csharp n dotnet"},{"location":"hands-on/random-extjs-overview/","text":"Metadata Version 4.2 Documentation here Scenarios and Thoughts Create and configure the data source var store = Ext.create( 'Ext.data.Store', { [ 'id', 'name' ], getWhatFromWhereInHow: { \u5f02\u6b65, 'File/Func', { root: 'data' } (\u91ccid/name) }, autoReqAndLoadDataInTheVariable } ) Use existing component var win = Ext.create('userDefinedComponent', { tweaks }) win.loadData(); // <- Ext.apply(this, { k:v, I: impl }) win.show(); // <- extend: 'Ext.window.Window' // 0. It is always listening to various events // 1. You close the component // 2. It calls .close (.window.Window -> .panel.Panel) // 3. It fires up the 'close' event // 4. It runs code you have defined win.on('close', function() { .. }); Toolbars // At the top, commonly for CRUD operations tbar: [ { xtype: 'button', text: 'Button 1' } { customButton } ] var customButton = Ext.create( 'Ext.button.Button', { \u6309\u94ae\u540d // e.g. \u5bfc\u5165 \u6309\u94ae\u56fe\u6807 // e.g. icon-export \u6309\u4e0b\u53bb\u505a\u4ec0\u4e48 // e.g. set var, call func } ) // At the bottom, commonly used for paging bbar: Ext.create( 'Ext.PagingToolbar', { dataSource displayPagingInfo } ) Grand Layout { region: \"center\" // ~= left region: \"east\" region: \"north\" flex: 1 } Components inside components var withShorthand = Ext.create('Ext.Container', { region: 'north', border: false, height: 36, items: [{ xtype: 'form', layout: 'hbox', defaults: { margin: 3 }, items: [ { xtype: 'textfield', fieldLabel: 'Name' }, { xtype: 'button', text: 'Submit' }] }] }); var withoutShorthand = Ext.create('Ext.Container', { region: 'north', border: false, height: 36, items: [ Ext.create('Ext.form.Panel', { layout: Ext.create('Ext.layout.container.HBox'), defaults: { margin: 3 }, items: [ Ext.create('Ext.form.field.Text', { fieldLabel: 'Name' }), Ext.create('Ext.button.Button', { text: 'Submit' }) ] }) ] }); Grid/Table with listener selectionchange // Table -> [[Supercharged]] -> Grid (fetch/sort/filter/..) // Models like Ext.selection.xxModel // classes were imported via 'uses: []' by the Table // events fired by the xxModel will be relayed to the Table // implementation needed to handle the events in the listeners var sampleGrid = Ext.create( 'ZAN.BrandManagement.BrandGrid', { \u540d\u79f0 \u6bd4\u4f8b \u533a\u57df \u5177\u680f listeners: { // selModel Ext.selection.Model .getCount, getStore // records Ext.data.Model [0].get('id') selectionchange: function (selModel, records) { if (!Ext.isEmpty(selectedRecord)) { // Always an array even with one item selectedRecord[0].get('Name'); selectedRecord[0].get('Id'); } } } ); Methods seen from Ext.form.Panel // .up // .down // .setDisabled (universal)","title":"Random extjs overview"},{"location":"hands-on/random-extjs-overview/#metadata","text":"Version 4.2 Documentation here","title":"Metadata"},{"location":"hands-on/random-extjs-overview/#scenarios-and-thoughts","text":"Create and configure the data source var store = Ext.create( 'Ext.data.Store', { [ 'id', 'name' ], getWhatFromWhereInHow: { \u5f02\u6b65, 'File/Func', { root: 'data' } (\u91ccid/name) }, autoReqAndLoadDataInTheVariable } ) Use existing component var win = Ext.create('userDefinedComponent', { tweaks }) win.loadData(); // <- Ext.apply(this, { k:v, I: impl }) win.show(); // <- extend: 'Ext.window.Window' // 0. It is always listening to various events // 1. You close the component // 2. It calls .close (.window.Window -> .panel.Panel) // 3. It fires up the 'close' event // 4. It runs code you have defined win.on('close', function() { .. }); Toolbars // At the top, commonly for CRUD operations tbar: [ { xtype: 'button', text: 'Button 1' } { customButton } ] var customButton = Ext.create( 'Ext.button.Button', { \u6309\u94ae\u540d // e.g. \u5bfc\u5165 \u6309\u94ae\u56fe\u6807 // e.g. icon-export \u6309\u4e0b\u53bb\u505a\u4ec0\u4e48 // e.g. set var, call func } ) // At the bottom, commonly used for paging bbar: Ext.create( 'Ext.PagingToolbar', { dataSource displayPagingInfo } ) Grand Layout { region: \"center\" // ~= left region: \"east\" region: \"north\" flex: 1 } Components inside components var withShorthand = Ext.create('Ext.Container', { region: 'north', border: false, height: 36, items: [{ xtype: 'form', layout: 'hbox', defaults: { margin: 3 }, items: [ { xtype: 'textfield', fieldLabel: 'Name' }, { xtype: 'button', text: 'Submit' }] }] }); var withoutShorthand = Ext.create('Ext.Container', { region: 'north', border: false, height: 36, items: [ Ext.create('Ext.form.Panel', { layout: Ext.create('Ext.layout.container.HBox'), defaults: { margin: 3 }, items: [ Ext.create('Ext.form.field.Text', { fieldLabel: 'Name' }), Ext.create('Ext.button.Button', { text: 'Submit' }) ] }) ] }); Grid/Table with listener selectionchange // Table -> [[Supercharged]] -> Grid (fetch/sort/filter/..) // Models like Ext.selection.xxModel // classes were imported via 'uses: []' by the Table // events fired by the xxModel will be relayed to the Table // implementation needed to handle the events in the listeners var sampleGrid = Ext.create( 'ZAN.BrandManagement.BrandGrid', { \u540d\u79f0 \u6bd4\u4f8b \u533a\u57df \u5177\u680f listeners: { // selModel Ext.selection.Model .getCount, getStore // records Ext.data.Model [0].get('id') selectionchange: function (selModel, records) { if (!Ext.isEmpty(selectedRecord)) { // Always an array even with one item selectedRecord[0].get('Name'); selectedRecord[0].get('Id'); } } } ); Methods seen from Ext.form.Panel // .up // .down // .setDisabled (universal)","title":"Scenarios and Thoughts"}]}